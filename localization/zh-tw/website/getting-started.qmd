---
title: "Specflow 入門指南"
subtitle: "結構化代理優先軟體開發的逐步指南"
---

## 歡迎來到 Specflow

本指南將帶你完成第一個 Specflow 專案。結束後，你將學會如何運用 AI 協助，將模糊的想法轉化為完善執行的軟體專案。

## 事前準備

開始前，你需要：

- 可存取 AI 程式碼助理（ChatGPT、Claude、GitHub Copilot 等）
- 適合你選擇語言的開發環境
- 30-60 分鐘完成第一個專案
- 願意在寫程式前先規劃的開放心態

## Specflow 五大階段

::: {.text-center}
```{mermaid}
%%{init: {'theme':'base', 'themeVariables': {'primaryColor': '#f9f9f9'}}}%%
graph LR
    A[目標意圖<br/>捕捉] --> B[路線圖<br/>建立]
    B --> C[任務<br/>拆解]
    C --> D[協作<br/>執行]
    D --> E[持續<br/>優化]
    E --> |反覆| D
    
    style A fill:#e0f2fe
    style B fill:#e0f2fe
    style C fill:#e0f2fe
    style D fill:#e0f2fe
    style E fill:#d1fae5
```
:::

## 階段一：意圖—定義你的目標（10-15 分鐘）

**目標與原因**—先釐清你要建構什麼，以及它的重要性。

### 步驟 1.1：明確你的願景

請先回答以下問題：

1. **我想建構什麼？**
   - 具體但不必過度技術化
   - 著重成果，不是實作細節

2. **為什麼需要這個？**
   - 解決什麼問題？
   - 誰會受益？

3. **成功的樣貌？**
   - 如何判斷運作正常？
   - 關鍵功能有哪些？

### 步驟 1.2：撰寫意圖文件

建立一份意圖文件。範本如下：

```markdown
# 專案意圖：[你的專案名稱]

## 願景
[1-2 句描述你要建構的內容]

## 問題陳述
[你要解決什麼問題？]

## 成功標準
- [ ] [標準 1]
- [ ] [標準 2]
- [ ] [標準 3]

## 限制條件
- 技術： [任何技術限制]
- 時間： [截止日或時程]
- 資源： [可用工具/人力]

## 非目標
[本專案不包含哪些內容]
```

### 範例：天氣儀表板

```markdown
# 專案意圖：個人化天氣儀表板

## 願景
一個簡潔、極簡風格的網頁儀表板，顯示我關心的多個城市天氣資訊。

## 問題陳述
我每天都要查詢多個城市的天氣（家、辦公室、父母家），分散在不同 App。希望有一個統一的介面。

## 成功標準
- [ ] 顯示 3 個以上城市的即時天氣
- [ ] 每 30 分鐘自動更新
- [ ] 桌機與手機皆可用
- [ ] 2 秒內載入完成

## 限制條件
- 技術：僅使用免費天氣 API
- 時間：一個週末內完成
- 資源：單人開發，現代網頁技術

## 非目標
- 不含使用者帳號或個人化
- 不含 5 天以上的天氣歷史或預測
- 不開發原生行動 App
```

## 階段二：路線圖—規劃各階段（10-15 分鐘）

**里程碑**—將願景拆分為可管理的階段，每階段有明確目標。

### 步驟 2.1：劃分主要階段

將專案分為 3-5 個主要階段：

1. **基礎建設**：核心架構與結構
2. **核心功能**：主要功能
3. **強化優化**：細節修飾與提升
4. **部署上線**：公開可用

### 步驟 2.2：建立路線圖

每個階段都要定義：
- **目標**：此階段要達成什麼
- **交付物**：具體成果
- **依賴關係**：哪些必須先完成

### 範例路線圖：天氣儀表板

```markdown
# 天氣儀表板路線圖

## 階段一：基礎建設（2 小時）
**目標**：建立專案結構與基本 UI
**交付物**：
- 專案腳手架（React/Next.js）
- 基本元件架構
- 簡易樣式系統
**依賴關係**：無

## 階段二：天氣整合（3 小時）
**目標**：串接天氣 API 並顯示資料
**交付物**：
- 天氣 API 整合
- 城市天氣元件
- 自動更新機制
**依賴關係**：完成階段一

## 階段三：多城市支援（2 小時）
**目標**：優雅支援多城市
**交付物**：
- 城市管理系統
- 響應式格狀排版
- 偏好儲存（local storage）
**依賴關係**：完成階段二

## 階段四：優化與部署（1 小時）
**目標**：細緻 UI 並部署到正式環境
**交付物**：
- 載入狀態與錯誤處理
- 最終 UI 修飾
- 部署到 Vercel/Netlify
**依賴關係**：完成階段三
```

## 階段三：任務—細分執行項（每階段 5-10 分鐘）

**人類 + AI**—將路線圖項目轉為具體任務，合理分配給人類與 AI。

### 步驟 3.1：細分每個階段

每個階段都要拆成具體任務：

1. **任務要原子化**（一次可完成）
2. **明確產出**（何謂「完成」）
3. **分配人類或 AI**（依強項分工）

### 步驟 3.2：建立任務清單

格式如下：

```markdown
## 階段一任務：基礎建設

### 任務 1.1：專案初始化【AI 協助】
- 初始化 Next.js + TypeScript 專案
- 設定 ESLint 與 Prettier
- 建立資料夾結構
- 產出：可執行的開發環境

### 任務 1.2：元件架構設計【人類】
- 設計元件階層
- 建立元件介面
- 設定 props 型別
- 產出：元件結構圖

### 任務 1.3：基礎元件【AI 協助】
- 建立 Layout 元件
- 建立 WeatherCard 元件雛形
- 建立 CityGrid 元件
- 產出：基本元件檔案
```

## 階段四：執行—協作建構

**系統化**—與 AI 夥伴有條理地完成任務。

### 步驟 4.1：準備 AI 助理

每次 AI 協作前，請提供完整背景：

```
我正在用 Specflow 方法建構天氣儀表板。

目前狀態：
- 階段：1（基礎建設）
- 任務：1.1（專案初始化）

意圖摘要：
[貼上你的意圖文件摘要]

任務細節：
[貼上具體任務內容]

請協助我完成此任務。
```

### 步驟 4.2：系統化執行

1. **依序完成任務**（遵守依賴順序）
2. **驗證每個產出**（是否符合定義）
3. **記錄決策**（保留背景資訊）
4. **常態提交**（維持進度）

### 步驟 4.3：有效 AI 提問

良好的 Specflow 提問包含：

- **背景**：目前專案進度
- **明確需求**：你現在需要什麼
- **限制條件**：任何限制或偏好
- **產出格式**：希望回覆的形式

範例：

```
我在天氣儀表板專案的第二階段，任務 2.1。
需要串接 OpenWeatherMap API。

需求：
- 使用 fetch API（不用 axios）
- 錯誤處理要完善
- 回傳標準化資料結構
- 包含 TypeScript 型別

請建立一個 weather service 模組。
```

## 階段五：優化—反覆修正與學習

**持續改進**—檢查產出是否符合意圖，並持續優化。

### 步驟 5.1：定期檢查

每個階段結束後，請自問：

1. **產出是否符合意圖？**（參考原始願景）
2. **有什麼新發現？**（新限制或機會）
3. **路線圖需要調整嗎？**（根據學習修正）

### 步驟 5.2：智慧迭代

- **小幅調整**：更新任務細節
- **中度變更**：修正階段目標
- **大幅轉向**：重寫意圖文件

## 你的第一個 Specflow 專案

### 建議入門專案

依經驗選擇：

**初學者**：個人待辦 CLI
- 共 4-6 小時
- 需求明確
- 範圍有限

**進階**：Markdown 部落格產生器
- 共 8-12 小時
- 檔案處理
- 樣板系統

**高階**：API 整合儀表板
- 共 16-24 小時
- 多資料來源
- 即時更新

### 成功秘訣

1. **從小處開始**—第一個專案應一天內可完成
2. **全部記錄**—未來的你會感謝現在的你
3. **擁抱流程**—規劃雖慢但能省時
4. **自由迭代**—計畫可隨時調整
5. **慶祝里程碑**—每完成一階段都要肯定

## 常見陷阱與避免方法

::: {style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; margin: 2rem 0;"}

::: {style="padding: 1.25rem; background: #fee2e2; border-radius: 8px; border-left: 4px solid #dc2626;"}
### 🚫 跳過意圖

**症狀**：需求不斷變動  
**解法**：投入階段一
:::

::: {style="padding: 1.25rem; background: #fff7ed; border-radius: 8px; border-left: 4px solid #ea580c;"}
### ⚠️ 過度規劃

**症狀**：分析癱瘓  
**解法**：規劃要限時
:::

::: {style="padding: 1.25rem; background: #fef3c7; border-radius: 8px; border-left: 4px solid #f59e0b;"}
### 🔀 忽略依賴

**症狀**：各部分無法整合  
**解法**：依任務順序執行
:::

::: {style="padding: 1.25rem; background: #e0f2fe; border-radius: 8px; border-left: 4px solid #0284c7;"}
### 💭 背景遺失

**症狀**：AI 產生混亂  
**解法**：務必提供完整背景
:::

:::

## 下一步

想深入了解？

1. [**瀏覽範例**](examples/index.qmd)－看看 Specflow 實際應用
2. [**閱讀參考文件**](reference/index.qmd)－詳細方法論指南
3. [**加入社群**](#)－分享你的經驗

## 快速參考卡

專案初期請隨身備查：

```
Specflow 快速參考
========================

1. 意圖：目標 + 原因 + 成功標準
2. 路線圖：各階段目標
3. 任務：具體、原子化行動
4. 執行：系統化完成
5. 優化：學習並修正

記住：先規劃，後執行！
```

---

*立即展開你的 Specflow 之旅，未來的你會感謝現在的自己。*

[下載入門範本](#){.btn .btn-primary}

---

**免責聲明**：本文件由 [GitHub Copilot](https://docs.github.com/copilot/about-github-copilot/what-is-github-copilot) 翻譯，可能包含錯誤。如發現不當或錯誤翻譯，請至 [issue](../../issues) 回報。