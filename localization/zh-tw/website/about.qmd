---
title: "關於 Specflow"
subtitle: "理解結構化 agent-first 軟體開發的方法論"
---

::: {style="background-color: #fff7ed; padding: 1rem 1.5rem; border-radius: 6px; margin: 1.5rem 0; border: 1px solid #fed7aa; max-width: 800px;"}

**🚨 不是那個 SpecFlow** - 這不是 SpecFlow.org（已退役的 .NET 測試框架）。他們是將規格轉為測試，而我們則是透過結構化 AI 協作，將規格轉為可執行的軟體。

:::

## 什麼是 Specflow？

Specflow 是一種**結構化但靈活**的流程，讓你能用 AI agent 建構軟體。它將常見的 agent-first 開發混亂流程，轉化為系統化、可重複的方法論，持續產出符合你願景的成果。

## 它解決了哪些問題？

用 AI agent 建構軟體會遇到獨特的挑戰：

::: {.panel-tabset}

### 🎯 意圖落差

**問題**  
你心裡有想法，但 AI 產出的結果卻不如預期，常常南轅北轍。

**解決方案**  
Specflow 從明確捕捉意圖開始，確保你的願景在寫程式碼前就被清楚記錄，從一開始就建立一致性。

### 💭 上下文流失

**問題**  
AI agent 在多次互動間會遺失上下文，導致結果不一致或互相矛盾。每次互動都像是重新開始。

**解決方案**  
Specflow 透過結構化文件與漸進式細化，持續保留上下文。你的 AI 助理始終知道你目前的進度。

### 🧩 協作困難

**問題**  
多次 AI 互動常常產生零散、不相容的片段。左手不知道右手在做什麼。

**解決方案**  
Specflow 提供一份路線圖，確保所有片段都能協同運作，朝向統一目標。每個元件都設計成可無縫整合。

### ⚡ 效率悖論

**問題**  
AI 可以很快產生程式碼，但常常需要大量重工。快速產生反而導致整體進度變慢。

**解決方案**  
Specflow 的先規劃後執行方法，能減少重工，從一開始就做對。前期投入時間，後期省下更多。

:::

## Specflow 方法論

### 核心組件

1. **意圖捕捉**
   - 先從大方向：你想建構什麼？
   - 記錄成功標準與限制條件
   - 明確定義問題範疇

2. **路線圖建立**
   - 將意圖拆解成階段
   - 找出相依性與優先順序
   - 建立可衡量的里程碑

3. **任務分解**
   - 將路線圖項目轉為具體可執行任務
   - 最佳分配任務給人類與 AI
   - 為每個任務定義明確的輸入與輸出

4. **協作執行**
   - 用合適工具與 agent 執行任務
   - 持續與原始意圖保持一致
   - 根據結果與學習反覆迭代

5. **持續優化**
   - 以意圖檢視產出
   - 根據新發現調整路線圖
   - 改進提示詞與流程

## 關鍵原則

### 先規劃，後執行
就像建築師在動工前先畫藍圖，Specflow 強調先規劃再下指令。前期投入，能大幅減少重工並提升成果。

### 漸進細化
先從高層概念開始，逐步補充細節。這種做法兼顧彈性與一致性。

### 人工智慧協同
認知人類與 AI 各自的優勢，Specflow 最佳化任務分配，充分發揮雙方能力。

### 上下文保留
從最初意圖到最終實作，始終維持清晰脈絡。每個決策與產出都能追溯到原始願景。

## 誰適合用 Specflow？

::: {style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; margin: 2rem 0;"}

::: {style="padding: 1.25rem; background: #f8f9fa; border-radius: 8px; border: 1px solid #e1e4e8; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"}
### 👩‍💻 軟體開發者
**加速你的工作流程**

- ✓ 更快建構功能
- ✓ 維持程式碼品質
- ✓ 減少除錯時間

*自信交付*
:::

::: {style="padding: 1.25rem; background: #f8f9fa; border-radius: 8px; border: 1px solid #e1e4e8; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"}
### 📊 產品經理
**連結願景與執行**

- ✓ 將願景轉為程式碼
- ✓ 確保功能一致
- ✓ 清楚追蹤進度

*交付真正重要的成果*
:::

::: {style="padding: 1.25rem; background: #f8f9fa; border-radius: 8px; border: 1px solid #e1e4e8; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"}
### 🚀 技術領導者
**擴展團隊影響力**

- ✓ 擴充 AI 能力
- ✓ 維持架構品質
- ✓ 提升生產力

*帶領團隊高效交付*
:::

::: {style="padding: 1.25rem; background: #f8f9fa; border-radius: 8px; border: 1px solid #e1e4e8; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"}
### 🤖 AI 愛好者
**精通 AI 開發**

- ✓ 取得更好 AI 成果
- ✓ 結構化提示
- ✓ 挑戰大型專案

*解鎖 AI 潛力*
:::

:::

## Specflow 的差異

傳統 AI 提示就像沒有地圖的指路，Specflow 則提供地圖、路線與導航系統。

| 🔮 一鍵魔法 | 🧠 SpecFlow 方法 |
|---------------------|-------------------|
| 黑箱產生 | 透明、逐步推理 |
| 即時程式碼，結果難預測 | 規劃迭代，成果可預期 |
| 沒有意圖記憶 | 專案記憶隨決策演進 |
| 你下指令，它丟結果 | 你協作，它建構 |
| 快速展示，難以延展 | 為真實架構與迭代而生 |

## 如何開始

準備好要改變你的 AI 協作開發流程了嗎？

- [**閱讀入門指南**](getting-started.qmd) 逐步認識流程
- [**探索範例**](examples/index.qmd) 了解 Specflow 實際應用
- [**查閱參考文件**](reference/index.qmd) 深入方法論細節

## 加入行列

Specflow 是一套為了用 AI 更好建構軟體而誕生的方法論。無論你是在寫多功能腳本，還是架構複雜系統，Specflow 都能幫助你善用 AI 的力量，同時掌控成果。

---

*Specflow：用今日的 agent 結構化建構軟體。*

---

**免責聲明**：本文件由 [GitHub Copilot](https://docs.github.com/copilot/about-github-copilot/what-is-github-copilot) 在本地化過程中產生，因此可能包含錯誤。如發現任何不當或錯誤翻譯，請至[問題頁面](../../issues)回報。
