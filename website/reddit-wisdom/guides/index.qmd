---
title: "Guide Repository"
description: "Browse community-created guides for AI-assisted development"
format:
  html:
    include-in-header:
      - text: |
          <script src="https://unpkg.com/lunr/lunr.js"></script>
          <script src="/data/posts-data.js"></script>
---

[← Back to Reddit Wisdom](../index.html){.back-link}

## Community Guides & Workflows

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search guides by title, author, or content..." class="form-control">
  <div id="searchResults"></div>
</div>

<div class="filter-controls">
  <button class="filter-btn active" data-filter="all">All Guides</button>
  <button class="filter-btn" data-filter="vibe-coding">Vibe Coding</button>
  <button class="filter-btn" data-filter="multi-agent">Multi-Agent</button>
  <button class="filter-btn" data-filter="api-integration">API Integration</button>
  <button class="filter-btn" data-filter="prompting">Prompting</button>
  <button class="filter-btn" data-filter="context-management">Context Management</button>
</div>

<div class="sort-controls">
  Sort by: 
  <select id="sortSelect" class="form-select form-select-sm">
    <option value="score">Highest Score</option>
    <option value="date">Most Recent</option>
    <option value="title">Title (A-Z)</option>
  </select>
</div>

<div id="guidesContainer" class="guides-grid">
  <!-- Guides will be dynamically loaded here -->
</div>

<script>
// Wait for DOM and data to load
document.addEventListener('DOMContentLoaded', function() {
  // Check if posts data is available
  if (!window.postsData || !window.postsData.posts) {
    document.getElementById('guidesContainer').innerHTML = '<p class="error">Error loading guides. Please try refreshing the page.</p>';
    return;
  }

  const posts = window.postsData.posts;
  
  // Initialize search index
  const idx = lunr(function () {
    this.ref('id');
    this.field('title');
    this.field('body');
    this.field('author');
    this.field('category');
    
    posts.forEach(post => {
      this.add({
        id: post.id,
        title: post.title,
        body: post.body,
        author: post.author,
        category: post.category.join(' ')
      });
    });
  });

  // Get DOM elements
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');
  const guidesContainer = document.getElementById('guidesContainer');

  // Display function
  function displayPosts(postsToShow, container) {
    const html = postsToShow.map(post => {
      const categoryBadges = post.category.map(cat => 
        `<span class="category-badge category-${cat}">${cat.replace('-', ' ')}</span>`
      ).join('');
      
      const excerpt = post.body.substring(0, 200).replace(/[#*`]/g, '') + '...';
      const date = new Date(post.created_at).toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });
      
      return `
        <div class="guide-card" data-categories="${post.category.join(' ')}">
          <div class="guide-header">
            <h3><a href="posts/${post.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').substring(0, 50)}/">${post.title}</a></h3>
            <div class="guide-meta">
              <span class="author">by ${post.author}</span>
              <span class="date">${date}</span>
            </div>
          </div>
          <div class="guide-categories">${categoryBadges}</div>
          <p class="guide-excerpt">${excerpt}</p>
          <div class="guide-footer">
            <span class="score">${post.score} points</span>
            <span class="subreddit">r/${post.subreddit}</span>
            <a href="${post.url}" target="_blank" class="reddit-link">View on Reddit →</a>
          </div>
        </div>
      `;
    }).join('');
    
    container.innerHTML = html || '<p class="no-results">No guides found matching your criteria.</p>';
  }

  // Search functionality
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    
    if (query.length < 2) {
      searchResults.innerHTML = '';
      displayPosts(posts, guidesContainer);
      return;
    }
    
    const results = idx.search(query);
    const matchedPosts = results.map(result => 
      posts.find(post => post.id === result.ref)
    );
    
    searchResults.innerHTML = `Found ${matchedPosts.length} results for "${query}"`;
    displayPosts(matchedPosts, guidesContainer);
  });

  // Filter functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  filterButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
      // Update active state
      filterButtons.forEach(b => b.classList.remove('active'));
      e.target.classList.add('active');
      
      const filter = e.target.dataset.filter;
      let filteredPosts = posts;
      
      if (filter !== 'all') {
        filteredPosts = posts.filter(post => 
          post.category.includes(filter)
        );
      }
      
      displayPosts(filteredPosts, guidesContainer);
    });
  });

  // Sort functionality
  const sortSelect = document.getElementById('sortSelect');
  sortSelect.addEventListener('change', (e) => {
    const sortBy = e.target.value;
    let sortedPosts = [...posts];
    
    switch(sortBy) {
      case 'score':
        sortedPosts.sort((a, b) => b.score - a.score);
        break;
      case 'date':
        sortedPosts.sort((a, b) => 
          new Date(b.created_at) - new Date(a.created_at)
        );
        break;
      case 'title':
        sortedPosts.sort((a, b) => 
          a.title.localeCompare(b.title)
        );
        break;
    }
    
    displayPosts(sortedPosts, guidesContainer);
  });

  // Initialize with all posts sorted by score
  displayPosts(posts.sort((a, b) => b.score - a.score), guidesContainer);
});
</script>

<style>
.search-container {
  margin: 2rem 0;
}

#searchInput {
  font-size: 1.1rem;
  padding: 0.75rem;
}

#searchResults {
  margin-top: 0.5rem;
  color: var(--bs-secondary);
  font-size: 0.9rem;
}

.filter-controls {
  margin: 1.5rem 0;
  text-align: center;
}

.filter-btn {
  background: none;
  border: 1px solid var(--bs-border-color);
  padding: 0.25rem 0.75rem;
  margin: 0.2rem;
  border-radius: 1.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.875rem;
}

.filter-btn:hover {
  background: var(--bs-light);
}

.filter-btn.active {
  background: var(--bs-primary);
  color: white;
  border-color: var(--bs-primary);
}

.sort-controls {
  text-align: right;
  margin-bottom: 1.5rem;
}

.sort-controls select {
  display: inline-block;
  width: auto;
  margin-left: 0.5rem;
}

.guides-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1.5rem;
  margin: 2rem 0;
}

@media (max-width: 1200px) {
  .guides-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .guides-grid {
    grid-template-columns: 1fr;
  }
}

.guide-card {
  border: 1px solid var(--bs-border-color);
  border-radius: 0.5rem;
  padding: 1.5rem;
  background: var(--bs-body-bg);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

.guide-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.guide-header h3 {
  margin: 0 0 0.5rem 0;
  font-size: 1.1rem;
  line-height: 1.3;
}

.guide-header h3 a {
  color: var(--bs-primary);
  text-decoration: none;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.guide-header h3 a:hover {
  text-decoration: underline;
}

.guide-meta {
  font-size: 0.875rem;
  color: var(--bs-secondary);
  margin-bottom: 0.75rem;
}

.guide-meta span {
  margin-right: 1rem;
}

.guide-categories {
  margin: 0.5rem 0;
  display: flex;
  flex-wrap: wrap;
  gap: 0.3rem;
}

.category-badge {
  display: inline-block;
  padding: 0.1rem 0.4rem;
  font-size: 0.65rem;
  border-radius: 0.5rem;
  text-transform: capitalize;
  white-space: nowrap;
}

.category-vibe-coding {
  background: #e3f2fd;
  color: #1976d2;
}

.category-multi-agent {
  background: #f3e5f5;
  color: #7b1fa2;
}

.category-api-integration {
  background: #e8f5e9;
  color: #388e3c;
}

.category-prompting {
  background: #fff3e0;
  color: #e65100;
}

.category-context-management {
  background: #fce4ec;
  color: #c2185b;
}

.category-general {
  background: #f5f5f5;
  color: #616161;
}

.guide-excerpt {
  color: var(--bs-body-color);
  margin: 1rem 0;
  line-height: 1.6;
  flex: 1;
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
}

.guide-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.5rem;
  font-size: 0.75rem;
  color: var(--bs-secondary);
  padding-top: 1rem;
  margin-top: auto;
  border-top: 1px solid var(--bs-border-color);
}

.guide-footer .score {
  font-weight: bold;
  color: var(--bs-success);
}

.reddit-link {
  color: #ff4500;
  text-decoration: none;
}

.reddit-link:hover {
  text-decoration: underline;
}

.no-results {
  text-align: center;
  color: var(--bs-secondary);
  padding: 3rem;
  font-size: 1.1rem;
}

.filter-controls {
  overflow-x: auto;
  white-space: nowrap;
  -webkit-overflow-scrolling: touch;
}
</style>